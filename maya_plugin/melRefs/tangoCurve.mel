// variable for selected item / rig
//float $pos = 0.0;
//				for(int $i = $keyLeft; $i < $keyRight; $i = $i + 10) {
//					$pos = `getAttr -time $i ($animCurve + ".o")`;
//					//print $pos;
//					$editPoints = ($editPoints + " " + $pos);
//				}


global proc getAnimCurves() {
	print("getAnimCurve is called");
    string $nodes[] = `ls -selection`;
	string $cmd = "";
	
	for ($node in $nodes)
	{
		//From each transform node, obtain its shape node and print its name	
		$currentTime = `currentTime -query`;
		print("\ncurrentTime:");
		print $currentTime;
		
		string $shapes[] = `listRelatives -shapes $node`;
		//getWorldSpacePosition($node, $currentTime);
		string $animCurves[] = `listConnections -type animCurve $node`;
		string $editPoints = "";
		
		int $keyLeft;
		int $keyRight;
		
		for ($animCurve in $animCurves) {
			string $query = `nodeType $animCurve`;
			
			if (0 == (strcmp("animCurveTL", $query))) {
				$editPoints = $editPoints + " -ep ";
				float $keyFrames[] = sort(`keyframe -q $animCurve`);
				$keyLeft = int($keyFrames[0]);
				$keyRight = int($keyFrames[size($keyFrames)-1]);
				int $keyLeftFound = false;
				int $keyRightFound = false;
				for( $keyFrame in $keyFrames ) {
					if ( $keyFrame < $currentTime ) {
						$keyLeft = $keyFrame;
						$keyLeftFound = true;
					}
					if ( $keyFrame > $currentTime && $keyRightFound == false) {
						$keyRight = $keyFrame;
						$keyRightFound = true;
						break;
					}
				}
				
				print("\nstartTime:");
				print $keyLeft;
				print("\nendTime:");
				print $keyRight;
				
				int $i = 0;
				for($i = int($keyLeft); $i < int($keyRight); $i = $i + 10) {
					float $pos = `getAttr -time $i ($animCurve + ".o")`;
					//print $pos;
					$editPoints = ($editPoints + " " + $pos);
				}
				print("\neditPoints:");
				print $editPoints;
				
			}
		}
		//string $editPoints = "";
		//int $i = 0;
		//for($i = int(global $keyLeft); $i < int(global $keyRight); $i = $i + 10) {
		//	$editPoints = $editPoints + " -ep ";
		//	for ($animCurve in $animCurves) {
		//		string $query = `nodeType $animCurve`;
		//			if (0 == (strcmp("animCurveTL", $query))) {
		//			float $pos = `getAttr -time $i ($animCurve + ".o")`;
		//			//print $pos;
		//			$editPoints = ($editPoints + " " + $pos);
		//		}
		//	}
		//}
		print("\neditPoints:");
		print $editPoints;
		if($editPoints != "") {
			$cmd = ("curve " + $editPoints + ";") ;
		}
	}
	if(size($nodes) != 0) {
		print($cmd);
		//eval($cmd);
	}
	print("Tango is created by command");
}

global proc viewCurve() {
	getAnimCurves();
}

/*
global proc createTangoCmd() {
	if (`window -exists tangoCmdWindow`) {
		deleteUI tangoCmdWindow;  
	}

	if (`windowPref -exists tangoWindow`) {
		windowPref -remove tangoWindow;  
	}
	window -title "Tango Curve Editor" tangoWindow;
	window -edit -widthHeight 500 500 tangoWindow;
		columnLayout;
			button -label "View curve" -command "createTango()";
		setParent..;    
	showWindow tangoWindow;
}
*/

// Create Tango Menu Items
global string $gMainWindow;
setParent $gMainWindow;

if(`menu -exists tangoMenu`) {
	deleteUI tangoMenu;
}
if(`menuItem -exists tangoCmdMenu`) {
	deleteUI tangoCmdMenu;
}
if(`menuItem -exists tangoNodeMenu`) {
	deleteUI tangoNodeMenu;
}

print("Calling getAnimCurve");
menu -label "Tango Editor" -tearOff true tangoMenu;
menuItem -label "Curve Control" -command "getAnimCurves()" tangoCmdMenu;

//setParent..